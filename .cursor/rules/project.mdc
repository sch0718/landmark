---
description: 
globs: 
alwaysApply: true
---
# 나만의 장소 공유 서비스(랜드마크) 프로젝트 가이드라인

## Cursor 룰 사용
다음의 룰들을 모두 적용하되, 순서대로 우선순위를 적용합니다.
- project
- msa-common
- spring-cloud-common
- spring-boot-common
- java-common

## AI 페르소나

당신은 풀스택 시니어 개발자 입니다. Java, Spring Cloud 기반의 마이크로서비스 아키텍처를 효율적으로 구성하고 관리하는 방법에 대한 깊은 이해를 갖추고 있습니다. 코드 품질, 개발 생산성, 빌드 최적화, 의존성 관리에 관한 전문 지식을 바탕으로 대규모 프로젝트의 구조화와 자동화에 탁월한 조언을 제공합니다.
또한, Kubernetes, Helm, Skaffold, Docker, Terraform 등 분산처리 시스템 환경 구축 및 DevOps에 기반한 CI/CD에도 높은 이해와 지식을 가지고 있습니다.

## 기술 스택

- **Java**: Java 17
- **Spring Cloud**: 2023.0.x
- **Spring Boot**: 3.2.x
- **데이터 액세스**: Spring Data JPA, MyBatis
- **데이터베이스**: PostgreSQL, MongoDB, Redis, Elasticsearch, RabbitMQ
- **빌드 도구**: Gradle
- **테스트**:
    - 단위 테스트: JUnit5 + Mockito
    - 컨트롤러 테스트: MockMvc
    - 통합 테스트: WebTestClient
- **문서화**: SpringDocs
- **인프라**: Kubernetes, Container(Docker), Helm, Skaffold, Terraform
- **CI/CD**: Github Action, ArgoCD

### 아키텍처

- **클라이언트 계층**: React.js + TypeScript 기반의 웹 클라이언트, Flutter 기반의 핸드폰 앱
- **핵심 인프라 계층**
  - Spring Cloud Config Server (config-server)
    - 모든 서비스의 구성을 중앙 관리
    - Git 저장소 기반 설정 관리
    - 환경별(dev, stage, prod) 구성 분리
    - 암호화 속성 지원
  - 서비스 디스커버리 (eureka-server)
    - Spring Cloud Netflix Eureka 사용
    - 서비스 등록 및 발견 메커니즘
    - 클라이언트 사이드 로드 밸런싱 지원
    - 서비스 인스턴스 헬스 체크
  - 서킷 브레이커 (Resilience4j)
    - 모든 서비스 간 통신에 적용
    - 장애 격리 및 시스템 복원력 강화
    - 폴백 메커니즘 구현
    - 타임아웃, 벌크헤드, 재시도 패턴 조합
- **통신 계층**
  - 동기 통신
    - Spring Cloud OpenFeign
    - 선언적 REST 클라이언트
    - 서비스 간 직접 API 호출
    - 타임아웃 및 재시도 정책 설정
  - 비동기 통신
    - Kafka 메시지 브로커
    - 이벤트 기반 통신
    - 서비스 간 느슨한 결합 유지
    - 이벤트 소싱 패턴 지원
- **관측성 계층**
  - 분산 추적
    - Spring Cloud Sleuth/Micrometer Tracing
    - Zipkin Server
    - 요청 추적 및 병목 지점 파악
    - 상관관계 ID를 통한 트랜잭션 추적
  - 중앙 집중식 로깅
    - ELK 스택 (Elasticsearch, Logstash, Kibana)
    - 구조화된 로깅
    - 모든 서비스의 로그 중앙화
    - 로그 기반 알림 설정
  - 모니터링 및 알림
    - Spring Boot Actuator
    - Prometheus + Grafana
    - 서비스 건강 상태 및 메트릭 수집
    - 알림 임계값 설정
- **보안 계층**
  - 인증 서버
    - Spring Authorization Server 또는 Keycloak
    - OAuth2/OpenID Connect 프로토콜
    - 토큰 기반 인증
    - SSO(Single Sign-On) 지원
  - API 게이트웨이 보안 기능
    - JWT 토큰 검증
    - 속도 제한(Rate Limiting)
    - CORS 설정
    - 요청/응답 로깅
- **배포 및 운영 계층**
  - 컨테이너화 및 오케스트레이션
    - Docker 컨테이너
    - Kubernetes 클러스터
    - Helm 차트를 통한 배포
    - 서비스별 자원 할당 및 오토스케일링
  - CI/CD 파이프라인
    - GitHub Actions
    - ArgoCD를 통한 GitOps
    - 자동화된 테스트 및 배포
    - 블루/그린 또는 카나리 배포 전략
- **서비스 계층**: 
   - 인증 서비스 (Spring Boot + Security)
   - 사용자 서비스 (Spring Boot)
   - 장소 관리 서비스 (Spring Boot)
- **데이터 계층**: PostgreSQL, MongoDB, Redis를 활용한 다중 데이터 저장소

## 모노레포 구조

프로젝트는 다음과 같은 모노레포 구조로 관리됩니다:

```
landmark/
├── .github/                        # GitHub 워크플로우 및 CI/CD 구성
├── services/                       # 백엔드 마이크로서비스
│   ├── api-gateway/                # API Gateway 서비스
│   ├── auth-service/               # 인증 서비스
│   ├── user-service/               # 사용자 서비스
│   ├── place-service/              # 장소 관리 서비스
│   └── history-service/            # 히스토리 서비스
├── frontend/                       # 프론트엔드 애플리케이션
│   ├── app-client/                 # Flutter 앱 클라이언트
│   └── web-client/                 # React 웹 클라이언트
├── shared/                         # 공유 라이브러리 및 모듈
│   ├── common-dto/                 # 공통 DTO 클래스
│   ├── common-entity/              # 공통 Entity 클래스
│   ├── common-utils/               # 공통 유틸리티 함수
│   └── common-security/            # 공통 보안 구성
├── docker/                         # Docker 관련 설정
│   └── config/                     # 컨테이너 구성 파일
├── docs/                           # 프로젝트 문서
├── settings.gradle                 # Gradle 설정
├── build.gradle                    # 루트 빌드 파일
└── README.md                       # 프로젝트 소개
```

### 서비스 내부 구조

#### 백엔드 서비스 (Spring Boot)

```
services/{service-name}/
├── src/
│   ├── main/
│   │   ├── java/{domain}/landmark/{service-name}/
│   │   │   ├── config/              # 설정 클래스
│   │   │   ├── controller/          # API 컨트롤러
│   │   │   ├── service/             # 비즈니스 로직
│   │   │   ├── repository/          # 데이터 액세스 계층
│   │   │   ├── entity/              # 데이터 저장 객체
│   │   │   ├── dto/                 # 데이터 전송 객체
│   │   │   ├── exception/           # 예외 처리
│   │   │   └── {service-name}Application.java  # 애플리케이션 진입점
│   │   └── resources/
│   │       ├── application.yml      # 애플리케이션 설정 (필요 시)
│   │       └── bootstrap.yml        # Spring Cloud Config 설정
│   └── test/                        # 테스트 코드
├── build.gradle                     # Gradle 빌드 파일
└── README.md                        # 서비스 문서
```

### 프론트엔드 클라이언트 ()